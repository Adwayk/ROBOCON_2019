/*  Connects to the home WiFi network
 *  Asks some network parameters
 *  Starts WiFi server with fix IP and listens
 *  Receives and sends messages to the client
 *  Communicates: wifi_client_01.ino
 */
#include <SPI.h>
#include <ESP8266WiFi.h>
#include <SoftwareSerial.h>
#include <Cytron_PS2Shield.h>

Cytron_PS2Shield ps2(10,11);

char arr[27];
byte ledPin = 2;
char ssid[] = "**********";               // SSID of your home WiFi
char pass[] = "**********";               // password of your home WiFi
WiFiServer server(80);                    

IPAddress ip(192, 168, 0, 80);            // IP address of the server
IPAddress gateway(192,168,0,1);           // gateway of your network
IPAddress subnet(255,255,255,0);          // subnet mask of your network



char speed_class(int a) //0 -255
{
  if (a> 225)
  return('8');
  if (a> 200)
  return('7');
  if (a> 175)
  return('6');
  if (a> 150)
  return('5');
  if (a> 125)
  return('4');
  if (a> 100)
  return('3');
  if (a> 75)
  return('2');
  if (a> 50)
  return('1');
  if (a> 25)
  return('0');
  else
  return('0');

}


void setup() {
  ps2.begin(115200);
  Serial.begin(115200);                   // only for debug
  WiFi.config(ip, gateway, subnet);       // forces to use the fix IP
  WiFi.begin(ssid, pass);                 // connects to the WiFi router
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  server.begin();                         // starts the server
/*  Serial.println("Connected to wifi");
  Serial.print("Status: "); Serial.println(WiFi.status());  // some parameters from the network
  Serial.print("IP: ");     Serial.println(WiFi.localIP());
  Serial.print("Subnet: "); Serial.println(WiFi.subnetMask());
  Serial.print("Gateway: "); Serial.println(WiFi.gatewayIP());
  Serial.print("SSID: "); Serial.println(WiFi.SSID());
  Serial.print("Signal: "); Serial.println(WiFi.RSSI());
  Serial.print("Networks: "); Serial.println(WiFi.scanNetworks());*/
  pinMode(ledPin, OUTPUT);
}

void loop () {
    if(ps2.readButton(PS2_JOYSTICK_LEFT) == 0)
  arr[0] = '1';
  else
  arr[0] = '0';
  if(ps2.readButton(PS2_JOYSTICK_RIGHT) == 0)
  arr[1] = '1';
  else
  arr[1] = '0';
  if(ps2.readButton(PS2_START) == 0)
  arr[2] = '1';
  else
  arr[2] = '0';
  if(ps2.readButton(PS2_UP) == 0)
  arr[3] = '1' ;
  else
  arr[3] = '0'; 
  if(ps2.readButton(PS2_RIGHT) == 0)
  arr[4] = '1';
  else
  arr[4] = '0';
  if(ps2.readButton(PS2_DOWN) == 0)
  arr[5] = '1';
  else
  arr[5] = '0';
  if(ps2.readButton(PS2_LEFT) == 0)
  arr[6] = '1';
  else
  arr[6] = '0';
  if(ps2.readButton(PS2_LEFT_2) == 0)
  arr[7] = '1';
  else
  arr[7] = '0';
  if(ps2.readButton(PS2_RIGHT_2) == 0)
  arr[8] = '1';
  else
  arr[8] = '0';
  if(ps2.readButton(PS2_LEFT_1) == 0)
  arr[9] = '1';
  else
  arr[9] = '0';
  if(ps2.readButton(PS2_RIGHT_1) == 0)
  arr[10] = '1';
  else
  arr[10] = '0';
  if(ps2.readButton(PS2_TRIANGLE) == 0)
  arr[11] = '1';
  else
  arr[11] = '0';
  if(ps2.readButton(PS2_CIRCLE) == 0)
  arr[12] = '1';
  else
  arr[12] = '0';
  if(ps2.readButton(PS2_CROSS) == 0)
  arr[13] = '1';
  else
  arr[13] = '0';
  if(ps2.readButton(PS2_SQUARE) == 0)
  arr[14] = '1';
  else
  arr[14] = '0';
  arr[16] = speed_class(ps2.readButton(PS2_JOYSTICK_LEFT_X_AXIS));
  arr[17] = speed_class(ps2.readButton(PS2_JOYSTICK_LEFT_Y_AXIS));
  arr[18] = speed_class(ps2.readButton(PS2_JOYSTICK_RIGHT_X_AXIS));
  arr[19] = speed_class(ps2.readButton(PS2_JOYSTICK_RIGHT_Y_AXIS));

  WiFiClient client = server.available();
  if (client) {
    if (client.connected()) {
      digitalWrite(ledPin, LOW);  // to show the communication only (inverted logic)
      Serial.println(".");
      client.flush();
      client.println(arr); // sends the answer to the client
    }
    client.stop();                // tarminates the connection with the client
  }
}
/*
  Digital button:
    1//PS2_SELECT 0
    PS2_JOYSTICK_LEFT 1
    PS2_JOYSTICK_RIGHT 2
    2//PS2_START 3
    3//PS2_UP 4
    4//PS2_RIGHT 5 
    5//PS2_DOWN 6 
    6//PS2_LEFT 7 
    7//PS2_LEFT_2 8 
    8//PS2_RIGHT_2 9
    9//PS2_LEFT_1 10
    10//PS2_RIGHT_1 11
    11//PS2_TRIANGLE 12
    12//PS2_CIRCLE 13 
    13//PS2_CROSS 14
    14//PS2_SQUARE 15

  Analog button:
    15//PS2_JOYSTICK_LEFT_X_AXIS 16
    16//PS2_JOYSTICK_LEFT_Y_AXIS 17
    17//PS2_JOYSTICK_RIGHT_X_AXIS 18
    18//PS2_JOYSTICK_RIGHT_Y_AXIS 19
    PS2_JOYSTICK_LEFT_UP 20
    PS2_JOYSTICK_LEFT_DOWN 21
    PS2_JOYSTICK_LEFT_LEFT 22
    PS2_JOYSTICK_LEFT_RIGHT 23
    PS2_JOYSTICK_RIGHT_UP 24
    PS2_JOYSTICK_RIGHT_DOWN 25
    PS2_JOYSTICK_RIGHT_LEFT 26
    PS2_JOYSTICK_RIGHT_RIGHT 27
*/